#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled 2"
  https://create.arduino.cc/cloud/things/ea3b6112-02a7-4f55-832d-7e0725687b87 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float add_Nutrient;
  float ec;
  float ph_init;
  int plant;
  int t;
  int water_flow;
  bool a_added;
  bool aC_Batt;
  bool add_A;
  bool add_B;
  bool b_added;
  bool harvest;
  bool high_acid;
  bool high_base;
  bool high_Nutrient;
  bool low_Nutrient;
  bool low_water;
  bool new_plant;
  bool phok;
  bool ph_override;
  bool system_Ready;
  bool test;
  bool water_flow_bool;
  CloudTime start_plant;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

#define Liquid_Detection_Pin 23

#define TdsSensorPin 33
#define VREF 1             // analog reference voltage(Volt) of the ADC
#define SCOUNT 30          // sum of sample point
int analogBuffer[SCOUNT];  // store the analog value in the array, read from ADC
int analogBufferTemp[SCOUNT];
int analogBufferIndex = 0, copyIndex = 0;
float averageVoltage = 0, tdsValue = 0, temperature = 25;
bool planting = false;
int plant_type;
float ecp;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  
}

void loop() {
  system_Ready = true;
  ArduinoCloud.update();
  

  // Serial.println(new_plant);
  if (new_plant == true && planting == false) {
    // read plant type
    plant_type = plant;
    ecp = plantEc();
    Serial.println(plant_type);
    // read plant date

    PhCalc();
    ec = Ecinit();
    EcCalc();
    planting = true;
  }
  if (planting == true) {
    add_A = false;
    add_B = false;
    Serial.println("planting");
    Serial.println(plant_type);
    //read sensor - use func
    ec = EcMeasure();
    EcCalc();

    // electricity_Percent = voltage();
    ArduinoCloud.update();
    water_flow = Flowrate();
    water_flow_bool = FlowCalc();
    //report - run update
  }
  if (harvest == true && planting == true) {
    planting = false;
  }
}

float plantEc() {
  if (plant == 0) {
    //lettuce
    return 1300;
  } else if (plant == 1) {
    //parsley
    return 1600;
  } else if (plant == 2) {
    //cabbage
    return 1300;
  } else if (plant == 3) {
    //strawberries
    return 2200;
  } else if (plant == 4) {
    //tomatoes
    return 2600;
  } else if (plant == 5) {
    //cucumbers
    return 2000;
  } else {
    return 1500;
  }
}

float EcMeasure() {
  float EcSen = analogRead(TdsSensorPin) * 2;
  // Serial.print("TDS Value:");
  // Serial.print(EcSen / 2);
  // Serial.println("ppm");
  return EcSen;
}

void EcCalc() {
  if (ec < ecp - 500) {
    // low nutrient
    add_Nutrient = ((((ecp - ec) / 210) / 2) * 4);
    low_Nutrient = false;
    t = 0;
    add_A = true;
    while (a_added != true) {
      ec = EcMeasure();
      ArduinoCloud.update();
    }
    while (t <= 60) {
      add_A = true;
      ec = EcMeasure();
      ArduinoCloud.update();
      t++;
      delay(5000);
      Serial.println(t);
      if (b_added == true) {
        t = 60;
      }
    }
    add_B = true;
    while (b_added != true) {
      ec = EcMeasure();
      ArduinoCloud.update();
    }
    low_Nutrient = true;
    Serial.println("adding done");


  } else {
    // normal
    add_Nutrient = 0;
    add_A = false;
    add_B = false;
  }

  if (ec < 5) {
    // low water
    low_water = false;
  }
}

void PhCalc() {
  ph_init = Phinit();
  while (Phinit() < 5.5 || Phinit() > 7.5) {
    ph_init = Phinit();
    phok = false;
    // low nutrient
    if (ph_init < 5.5) {
      high_acid = true;
      high_base = false;
    } else if (ph_init > 7.5) {
      high_acid = false;
      high_base = true;
    } else {
      high_acid = false;
      high_base = false;
      phok = true;
    }
    ArduinoCloud.update();
  }

  high_acid = false;
  high_base = false;
  phok = true;
  ArduinoCloud.update();
}


bool FlowCalc() {
  if (water_flow > 50) {
    return true;
  } else {
    return false;
  }
}

int Flowrate() {
  int flow = digitalRead(Liquid_Detection_Pin) * 100;
  Serial.println(flow);
  return flow;
}

float Phinit() {
  return 6.9;
}

float Ecinit() {
  float EcSen = analogRead(TdsSensorPin) * 2;
  // Serial.print("TDS Value:");
  // Serial.print(EcSen / 2);
  // Serial.println("ppm");
  return EcSen;
}

/*
  Since Plant is READ_WRITE variable, onPlantChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onPlantChange() {
  // Add your code here to act upon Plant change
}
/*
  Since AAdded is READ_WRITE variable, onAAddedChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onAAddedChange() {
  // Add your code here to act upon AAdded change
}
/*
  Since Harvest is READ_WRITE variable, onHarvestChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHarvestChange() {
  // Add your code here to act upon Harvest change
}
/*
  Since NewPlant is READ_WRITE variable, onNewPlantChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onNewPlantChange() {
  // Add your code here to act upon NewPlant change
}
/*
  Since StartPlant is READ_WRITE variable, onStartPlantChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onStartPlantChange() {
  // Add your code here to act upon StartPlant change
}
/*
  Since BAdded is READ_WRITE variable, onBAddedChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onBAddedChange() {
  // Add your code here to act upon BAdded change
}




/*
  Since PhOverride is READ_WRITE variable, onPhOverrideChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onPhOverrideChange() {
  // Add your code here to act upon PhOverride change
}
